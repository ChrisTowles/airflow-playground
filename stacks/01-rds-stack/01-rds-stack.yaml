AWSTemplateFormatVersion: "2010-09-09"
Description:  This template deploys airflow on rds with an RDS database


Parameters:
  ConfigName:
    Description: The name of the configuration.
    Type: String


# Note: I use mappings are used rather than passing in tons of parameters, the sam linter helps validate they are correct and much easier to reason about.
Mappings: 
  Configs:
    dev:
      VpcId: vpc-509d972a
      SubnetIds: 
        - subnet-1301c532 
        - subnet-076a9461
      DbClusterIdentifier: airflow-cluster
      DbInstanceIdentifier: airflow-instance
      DbName: airflowDb
      DbMinCapacity: 0.5
      DbMaxCapacity: 1

   
   
Resources:
 
  RdsUserAccountSecret:
    Type: 'AWS::SecretsManager::Secret'
    DeletionPolicy: Delete
    Properties:
      Name: /airflow-playground/rds-account
      Description: "Rds secret for Airflow"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "sa"}'
        GenerateStringKey: password
        PasswordLength: 24
        ExcludePunctuation: true
        

  RdsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: airflow-rds-sg
      GroupDescription: RDS DB cluster security group
      VpcId: !FindInMap [Configs, !Ref ConfigName, VpcId]


  RdsDbClusterEgressRule:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Allow all outbound traffic from the RDS DB cluster security group.
      GroupId: !Ref RdsSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: "-1"

  RdsDbClusterIngressRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow inbound traffic to the Rds DB
      GroupId: !Ref RdsSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp: 172.31.0.0/16
 

  DbSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: airflow-rds-subnet-group
      DBSubnetGroupDescription: airflow rds subnet group
      SubnetIds: !FindInMap [Configs, !Ref ConfigName, SubnetIds]
  
  RdsDbCluster:
    Type: 'AWS::RDS::DBCluster'
    DeletionPolicy: Delete
    Properties:
      Engine: aurora-postgresql
      DatabaseName: !FindInMap [Configs, !Ref ConfigName, DbName]
      DBClusterIdentifier:  !FindInMap [Configs, !Ref ConfigName, DbClusterIdentifier]
      DBSubnetGroupName: !Ref DbSubnetGroup
      MasterUsername: sa
      MasterUserPassword: !Join [ ':', ['{{resolve:secretsmanager', !Ref RdsUserAccountSecret, 'SecretString:password}}']]
      ServerlessV2ScalingConfiguration:
        MinCapacity: !FindInMap [Configs, !Ref ConfigName, DbMinCapacity] # smallest value that you can use is 0.5. ACUs. 
        MaxCapacity: !FindInMap [Configs, !Ref ConfigName, DbMaxCapacity] # maximum must be higher than 0.5 ACUs
      VpcSecurityGroupIds: 
        - !Ref RdsSecurityGroup
      Port: 5432

  RdsDbInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref RdsDbCluster
      DBInstanceIdentifier: !FindInMap [Configs, !Ref ConfigName, DbInstanceIdentifier]
      PubliclyAccessible: false
      AutoMinorVersionUpgrade: true

      